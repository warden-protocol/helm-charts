---
{{- if .Values.node.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-{{ .Values.node.name }}
  labels:
    {{- include "node.labels" . | nindent 4 }}
spec:
  {{- if not .Values.persistentVolumeClaimName }}
  volumeClaimTemplates:
    - metadata:
        name: {{ include "node.name" . }}-data
      spec:
        accessModes: [ReadWriteOnce]
        {{- with .Values.node.persistent.class }}
        storageClassName: "{{ . }}"
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.node.persistent.size }}
  {{- end }}
  replicas: {{ .Values.node.replicaCount }}
  selector:
    matchLabels:
      {{- include "node.selectorLabels" . | nindent 8 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
          {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "node.selectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.secretManager.enabled }}
      serviceAccountName: {{ .Values.secretManager.serviceAccount.name }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints.enabled }}
      topologySpreadConstraints:
      - maxSkew: {{ .Values.topologySpreadConstraints.maxSkew }}
        topologyKey: "topology.kubernetes.io/zone"
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            {{- include "node.selectorLabels" . | nindent 12 }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
      {{ toYaml .Values.imagePullSecrets | indent 8 }}
      {{- end }}
      initContainers:
        - name: init
          image: "{{ .Values.image }}:{{ .Values.imageTag | default .Chart.AppVersion }}"
          command: [ "/bin/bash" , "/scripts/init.sh" ]
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          env:
            - name: SYNC_METHOD
              value: "{{.Values.syncMethod }}"
            - name: SNAPSHOT_URL
              value: "{{.Values.snapshot.url }}"
            - name: WARDEND_HOME
              value: "{{ .Values.node.home }}"
            {{- if .Values.scratch.genesisUrl }}
            - name: GENESIS_URL
              value: "{{ .Values.scratch.genesisUrl }}"
            {{- end}}
          volumeMounts:
            - name: scripts
              mountPath: /scripts
              readOnly: true
            {{- if not .Values.persistentVolumeClaimName }}
            - name: {{ include "node.name" . }}-data
            {{- else }}
            - name: {{ .Values.persistentVolumeClaimName }}
            {{- end }}
              mountPath: {{ .Values.node.home }}
            {{- if .Values.secretManager.enabled }}
            - name: secrets
              mountPath: /tmp/keys
              readOnly: true
            {{- else }}
            {{- if .Values.node.nodeKeysSecretName }}
            - name: {{ include "node.name" . }}-keys
              mountPath: /tmp/keys
              readOnly: true
            {{- end }}
            {{- end }}
        {{- if .Values.cosmovisor.enabled }}
        - name: init-cosmovisor
          image: "{{ .Values.image }}:{{ .Values.imageTag | default .Chart.AppVersion }}"
          command: [ "/bin/bash" , "/scripts/init-cosmovisor.sh" ]
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          env:
            - name: COSMOVISOR_VERSION
              value: "{{ .Values.cosmovisor.version }}"
            - name: WARDEND_HOME
              value: "{{ .Values.node.home }}"
          volumeMounts:
            - name: scripts-cosmovisor
              mountPath: /scripts
              readOnly: true
            {{- if not .Values.persistentVolumeClaimName }}
            - name: {{ include "node.name" . }}-data
            {{- else }}
            - name: {{ .Values.persistentVolumeClaimName }}
            {{- end }}
              mountPath: {{ .Values.node.home }}
        {{- end }}
        {{- if .Values.node.mnemonicSecretName }}
        - name: init-keys
          image: "{{ .Values.image }}:{{ .Values.imageTag | default .Chart.AppVersion }}"
          command: ["/bin/sh", "-c"]
          args: 
            - |
              #!/bin/bash
              keys=$(wardend keys list --keyring-backend test | grep validator)
              if [ -z "$keys" ]; then
                cat /tmp/mnemonic/MNEMONIC | wardend keys add validator --recover --keyring-backend test
              else
                echo "Validator key already in place, not adding it"
              fi
          volumeMounts:
            {{- if not .Values.persistentVolumeClaimName }}
            - name: {{ include "node.name" . }}-data
            {{- else }}
            - name: {{ .Values.persistentVolumeClaimName }}
            {{- end }}
              mountPath: {{.Values.node.home}}
            {{- if .Values.secretManager.enabled }}
            - name: secrets
            {{- else }}
            - name: {{ include "node.name" . }}-mnemonic
            {{- end }}
              mountPath: /tmp/mnemonic
              readOnly: true
        {{- end }}
      containers:
        {{- if .Values.oracle.enabled }}
        - name: slinky
          image: "{{ .Values.oracle.image}}:{{ .Values.oracle.imageTag}}"
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          ports:
            - name: oracle
              containerPort: 8080
              protocol: TCP
            {{- if .Values.oracle.metricsEnabled }}
            - name: oracle-metrics
              containerPort: 8002
              protocol: TCP
            {{- end }}
        {{- end }}
        - name: {{ include "node.name" . }}
          image: "{{ .Values.image }}:{{ .Values.imageTag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          {{- if .Values.node.ready }}
          {{- if .Values.cosmovisor.enabled }}
          command: ["{{.Values.node.home}}/cosmovisor/bin/cosmovisor","run","start"]
          {{- else }}
          command: ["/usr/bin/wardend","start"]
          {{- end }}
          {{- else }}
          command: ["sleep","36000"]
          {{- end }}
          env:
          {{- with .Values.env }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
            - name: WARDEND_HOME
              value: {{ .Values.node.home }}
          {{- if .Values.cosmovisor.enabled }}
            - name: DAEMON_NAME
              value: "wardend"
            - name: DAEMON_HOME
              value: {{ .Values.node.home }}
            - name: DAEMON_RESTART_AFTER_UPGRADE
              value: "{{ .Values.cosmovisor.restartAfterUpgrade }}"
            - name: DAEMON_ALLOW_DOWNLOAD_BINARIES
              value: "{{ .Values.cosmovisor.allowDownloadBinaries }}"
            - name: DAEMON_LOG_BUFFER_SIZE
              value: "{{ .Values.cosmovisor.logBufferSize }}"
            - name: UNSAFE_SKIP_BACKUP
              value: "{{ .Values.cosmovisor.unsafeSkipBackup }}"
          {{- end }}
          {{- if .Values.eipController.enabled }}
            - name: EIP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['aws-pod-eip-controller-public-ip']
            - name: WARDEND_P2P_EXTERNAL_ADDRESS
              value: $(EIP):26656
          {{- end }}
          {{- if and .Values.eipController.enabled .Values.eipController.check }}
            - name: EIP_CHECK
              value: "{{ .Values.eipController.check }}"
          {{- end }}
          volumeMounts:
          ports:
            {{- if .Values.node.rpc.enabled }}
            - name: rpc
              containerPort: 26657
              protocol: TCP
            {{- end }}
            {{- if .Values.node.p2p.enabled }}
            - name: p2p
              containerPort: 26656
              protocol: TCP
            {{- end }}
            {{- if .Values.node.api.enabled }}
            - name: api
              containerPort: 1317
              protocol: TCP
            {{- end }}
            {{- if .Values.node.grpc.enabled }}
            - name: grpc
              containerPort: 9090
              protocol: TCP
            {{- end }}
            {{- if .Values.node.metrics.enabled }}
            - name: telemetry
              containerPort: 26660
              protocol: TCP
            {{- end }}
            {{- if .Values.node.externalSigner }}
            - name: signer
              containerPort: 1234
              protocol: TCP
            {{- end }}
          {{- if .Values.node.ready }}
          livenessProbe:
            initialDelaySeconds: 10
            httpGet:
              path: /health
              port: rpc
          {{- if not .Values.node.externalSigner }}
          readinessProbe:
            initialDelaySeconds: 10
            exec:
              command:
                - /bin/sh
                - -exc
                - |
                  if [ ! -z "${EIP_CHECK+x}" ] && [ -z "$EIP" ]; then
                    echo "EIP is not set or empty"
                    exit 1
                  fi
                  curl --max-time 10  -f http://localhost:26657/health || exit 1
          {{- end }}
          {{- end }}
          volumeMounts:
            {{- if not .Values.persistentVolumeClaimName }}
            - name: {{ include "node.name" . }}-data
            {{- else }}
            - name: {{ .Values.persistentVolumeClaimName }}
            {{- end }}
              mountPath: {{ .Values.node.home }}
            - name: config
              mountPath: {{ .Values.node.home }}/config/config.toml
              subPath: config.toml
            - name: config
              mountPath: {{ .Values.node.home }}/config/app.toml
              subPath: app.toml
            {{- if le (int .Values.node.replicaCount) 1 }}
            {{- if not .Values.node.externalSigner }}
            {{- if .Values.secretManager.enabled }}
            - name: secrets
              mountPath: {{ .Values.node.home }}/config/priv_validator_key.json
              subPath: priv_validator_key.json
            {{- else }}
            {{- if .Values.node.nodeKeysSecretName }}
            - name: {{ include "node.name" . }}-keys
              mountPath: {{ .Values.node.home }}/config/priv_validator_key.json
              subPath: priv_validator_key.json
            {{- end }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{- if .Values.node.genesisSecretName }}
            - name: genesis
              mountPath: {{ .Values.node.home }}/config/genesis.json
              subPath: genesis.json
            {{- end }}
          resources:
            {{- toYaml .Values.node.resources | nindent 12 }}
      volumes:
        {{- if .Values.persistentVolumeClaimName }}
        - name: {{ .Values.persistentVolumeClaimName }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistentVolumeClaimName }}
        {{- end }}
        - name: scripts
          configMap:
            name: {{.Release.Name}}-{{ .Values.node.name }}-scripts
        {{- if .Values.cosmovisor.enabled }}
        - name: scripts-cosmovisor
          configMap:
            name: {{ .Release.Name }}-{{ .Values.node.name }}-cosmovisor-init
        {{- end }}
        - name: config
          configMap:
            name: {{ .Release.Name }}-{{ .Values.node.name }}-config
        {{- if .Values.secretManager.enabled }}
        - name: secrets
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ .Release.Name }}-{{ .Values.node.name }}
        {{- else }}
        {{- if .Values.node.nodeKeysSecretName }}
        - name: {{ include "node.name" . }}-keys
          secret:
            secretName: {{.Values.node.nodeKeysSecretName }}
        {{- end }}
        {{- if and .Values.node.mnemonicSecretName (not .Values.node.externalSigner) }}
        - name: {{ include "node.name" . }}-mnemonic
          secret:
            secretName: {{.Values.node.mnemonicSecretName }}
        {{- end }}
        {{- end }}
        {{- if .Values.node.genesisSecretName }}
        - name: genesis
          secret:
            secretName: {{ .Values.node.genesisSecretName }}
        {{- end }}
{{- end }}
