---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "snapshots.fullname" . }}-scripts
  labels:
    {{- include "snapshots.labels" . | nindent 4 }}
data:
  prepare.sh: |
    #!/bin/bash

    ARGOCD_USERNAME=$(cat /etc/argocd/username)
    ARGOCD_PASSWORD=$(cat /etc/argocd/password)
    ARGOCD_SERVER=$(cat /etc/argocd/server)

    ARGOCD_APP_NAMES="{{ join "," .Values.configMap.argocdApps }}"

    # get the number of replicas in the StatefulSet
    replicas=$(kubectl get sts {{ .Values.cronjob.stsName }} -o jsonpath='{.spec.replicas}')
    readyReplicas=$(kubectl get sts {{ .Values.cronjob.stsName }} -o jsonpath='{.status.readyReplicas}')

    # verify StatefulSet exists
    if [ $? -ne 0 ] || [ "$replicas" -eq 0 ]; then
      echo "StatefulSet {{ .Values.cronjob.stsName }} not found or has zero replicas in the current namespace"
      exit 1
    else
      echo "StatefulSet {{ .Values.cronjob.stsName }} has $replicas replicas"
    fi

    # verify the number of ready replicas matches the total replicas
    if [ "$replicas" -ne "$readyReplicas" ]; then
      echo "One or more replicas are not ready. Exiting."
      exit 1
    fi

    # get Argo CD authentication token
    get_argocd_token() {
      response=$(curl -s -X POST "$ARGOCD_SERVER/api/v1/session" -H "Content-Type: application/json" -d "{\"username\":\"$ARGOCD_USERNAME\",\"password\":\"$ARGOCD_PASSWORD\"}")
      echo $response | sed -n 's|.*"token":"\([^"]*\)".*|\1|p'
    }
    ARGOCD_TOKEN=$(get_argocd_token)

    if [ -z "$ARGOCD_TOKEN" ]; then
      echo "Failed to retrieve ArgoCD token. Exiting."
      exit 1
    fi

    # disable sync
    disable_sync() {
      app_name=$1
      curl -s -X PATCH "$ARGOCD_SERVER/api/v1/applications/$app_name" \
        -H "Authorization: Bearer $ARGOCD_TOKEN" \
        -H "Content-Type: application/json" \
        -d '{
              "patch": "{\"spec\":{\"syncPolicy\":null}}",
              "patchType": "merge"
            }' \
        -o /dev/null
      echo -e "\nSync policy for application $app_name successfully disabled."
    }

    # check sync policy
    IFS=',' read -r -a app_names <<< "$ARGOCD_APP_NAMES"
    for app_name in "${app_names[@]}"; do
      response=$(curl -s -X GET "$ARGOCD_SERVER/api/v1/applications/$app_name" \
        -H "Authorization: Bearer $ARGOCD_TOKEN" \
        -H "Content-Type: application/json")
      sync_enabled=$(echo "$response" | jq 'if .spec.syncPolicy.automated then true else false end')
      if [ "$sync_enabled" == "true" ]; then
        echo "Sync is enabled for $app_name. Disabling sync..."
        disable_sync "$app_name"
      else
        echo "Sync is already disabled for $app_name."
      fi
    done

    # scale down the StatefulSet by 1 replica
    new_replicas=$((replicas - 1))
    kubectl scale sts {{ .Values.cronjob.stsName }} --replicas=$new_replicas

    # wait for the StatefulSet to scale down
    while [[ $(kubectl get pods -l app.kubernetes.io/name={{ .Values.cronjob.stsName }} --field-selector=status.phase=Running --no-headers | wc -l) -gt $new_replicas ]]; do
      echo "Waiting for StatefulSet to scale down..."
      sleep 5
    done
    echo "StatefulSet {{ .Values.cronjob.stsName }} has scaled down to $new_replicas replicas"
  snapshot.sh: |
    #!/bin/bash

    ARGOCD_USERNAME=$(cat /etc/argocd/username)
    ARGOCD_PASSWORD=$(cat /etc/argocd/password)
    ARGOCD_SERVER=$(cat /etc/argocd/server)

    ARGOCD_APP_NAMES="{{ join "," .Values.configMap.argocdApps }}"

    FILENAME="snapshot_{{ .Release.Namespace }}_$(date +%F_%H-%M-%S).tar.lz4"
    S3_BUCKET="{{ .Values.configMap.s3Bucket | default (printf "s3://warden-snapshots/%s/" .Release.Namespace) }}"

    # create snapshot and upload to S3
    cd /pvc
    PATHS=({{- range .Values.configMap.paths }} {{ . }}{{- end }})
    TOTAL_SIZE=0
    for DIR in "${PATHS[@]}"; do
      DIR_SIZE=$(du -sb "$DIR" | awk '{print $1}')
      TOTAL_SIZE=$((TOTAL_SIZE + DIR_SIZE))
    done
    echo "Snapshot size: $TOTAL_SIZE bytes. Starting snapshot upload..."
    tar -I lz4 -cf -{{- range .Values.configMap.paths }} {{ . }}{{- end }} | aws s3 cp - "${S3_BUCKET}${FILENAME}" --expected-size "$TOTAL_SIZE" --no-progress
    echo "Snapshot upload completed."

    # get the number of replicas in the StatefulSet
    replicas=$(kubectl get sts {{ .Values.cronjob.stsName }} -o jsonpath='{.spec.replicas}')

    # scale up the StatefulSet back to its original state
    new_replicas=$((replicas + 1))
    kubectl scale sts {{ .Values.cronjob.stsName }} --replicas=$new_replicas

    # get Argo CD authentication token
    get_argocd_token() {
      response=$(curl -s -X POST "$ARGOCD_SERVER/api/v1/session" -H "Content-Type: application/json" -d "{\"username\":\"$ARGOCD_USERNAME\",\"password\":\"$ARGOCD_PASSWORD\"}")
      echo $response | sed -n 's|.*"token":"\([^"]*\)".*|\1|p'
    }
    ARGOCD_TOKEN=$(get_argocd_token)
    
    # enable sync
    IFS=',' read -r -a app_names <<< "$ARGOCD_APP_NAMES"
    for app_name in "${app_names[@]}"; do
      curl -s -X PATCH "$ARGOCD_SERVER/api/v1/applications/$app_name" \
        -H "Authorization: Bearer $ARGOCD_TOKEN" \
        -H "Content-Type: application/json" \
        -d '{
              "patch": "{\"spec\":{\"syncPolicy\":{\"automated\":{\"prune\":true,\"selfHeal\":true}}}}",
              "patchType": "merge"
            }'
      echo -e "\nSync policy for application $app_name successfully enabled"
    done
